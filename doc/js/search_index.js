var search_data = {"index":{"searchIndex":["hd","chord","hdconfig","narray","ratio","weightedarray","*()","**()","+()","-()","/()","<()","<=>()","==()",">()","[]()","abs()","candidates()","choose()","coerce()","dec()","distance()","distance()","each()","eql?()","factors()","from_a()","from_factors()","from_s()","hash()","hd_sum()","logical_origin()","map()","narray_to_string()","new()","new()","new()","pairs()","pc_space()","prime_weights=()","reduce()","reject_untuneable_intervals()","reject_untuneable_intervals!()","select()","to_f()","to_s()","to_s()","weights()","weights=()"],"longSearchIndex":["hd","hd::chord","hd::hdconfig","hd::narray","hd::ratio","hd::weightedarray","hd::ratio#*()","hd::ratio#**()","hd::ratio#+()","hd::ratio#-()","hd::ratio#/()","hd::ratio#<()","hd::ratio#<=>()","hd::ratio#==()","hd::ratio#>()","hd::ratio::[]()","hd::ratio#abs()","hd::chord#candidates()","hd::weightedarray#choose()","hd::ratio#coerce()","hd::ratio#dec()","hd::narray#distance()","hd::ratio#distance()","hd::ratio#each()","hd::ratio#eql?()","hd::ratio#factors()","hd::ratio::from_a()","hd::ratio::from_factors()","hd::ratio::from_s()","hd::ratio#hash()","hd::chord#hd_sum()","hd::chord#logical_origin()","hd::ratio#map()","hd::narray_to_string()","hd::hdconfig::new()","hd::ratio::new()","hd::weightedarray::new()","hd::chord#pairs()","hd::ratio#pc_space()","hd::hdconfig#prime_weights=()","hd::ratio#reduce()","hd::hdconfig#reject_untuneable_intervals()","hd::hdconfig#reject_untuneable_intervals!()","hd::select()","hd::ratio#to_f()","hd::chord#to_s()","hd::ratio#to_s()","hd::weightedarray#weights()","hd::weightedarray#weights=()"],"info":[["HD","","HD.html","","<p>HD\n<p>A module for measuring harmonic distance in just intonation\n<p>This module takes much of its inspiration …\n"],["HD::Chord","","HD/Chord.html","","<p>The chord is essentially just a sorted set that translates some of the\nbasic functions so that they’ll …\n"],["HD::HDConfig","","HD/HDConfig.html","","<p>Holds the configuration parameters for the various HD measurement\nfunctions.\n<p>Settings that are possible …\n"],["HD::NArray","","HD/NArray.html","","<p>This addition to the NArray\n"],["HD::Ratio","","HD/Ratio.html","","<p>Ratio class, which defines a point in harmonic space. In the process of\nre-writing this so it is a 2 …\n"],["HD::WeightedArray","","HD/WeightedArray.html","",""],["*","HD::Ratio","HD/Ratio.html#method-i-2A","(r)",""],["**","HD::Ratio","HD/Ratio.html#method-i-2A-2A","(r)",""],["+","HD::Ratio","HD/Ratio.html#method-i-2B","(r)",""],["-","HD::Ratio","HD/Ratio.html#method-i-2D","(r)",""],["/","HD::Ratio","HD/Ratio.html#method-i-2F","(r)",""],["<","HD::Ratio","HD/Ratio.html#method-i-3C","(other)",""],["<=>","HD::Ratio","HD/Ratio.html#method-i-3C-3D-3E","(other)","<p>Allows for an array of Ratio objects to be sorted according to size (scale\norder)\n"],["==","HD::Ratio","HD/Ratio.html#method-i-3D-3D","(r)",""],[">","HD::Ratio","HD/Ratio.html#method-i-3E","(other)",""],["[]","HD::Ratio","HD/Ratio.html#method-c-5B-5D","(*args)",""],["abs","HD::Ratio","HD/Ratio.html#method-i-abs","()",""],["candidates","HD::Chord","HD/Chord.html#method-i-candidates","(config = HD::HDConfig.new)","<p>Returns an array of all possible candidates connected to the pitches\nOptional argument pc_only allows …\n"],["choose","HD::WeightedArray","HD/WeightedArray.html#method-i-choose","()",""],["coerce","HD::Ratio","HD/Ratio.html#method-i-coerce","(other)",""],["dec","HD::Ratio","HD/Ratio.html#method-i-dec","()",""],["distance","HD::NArray","HD/NArray.html#method-i-distance","(origin = nil, config = HD::HDConfig.new)",""],["distance","HD::Ratio","HD/Ratio.html#method-i-distance","(origin = Ratio[1,1], config = HD::HDConfig.new)","<p>Returns the harmonic distance (as a “city block” measurement) between two\npoints. If no second …\n"],["each","HD::Ratio","HD/Ratio.html#method-i-each","()","<p>Each iterator; required for Enumerable\n"],["eql?","HD::Ratio","HD/Ratio.html#method-i-eql-3F","(r)","<p>Necesssary to test for sets and subsets\n"],["factors","HD::Ratio","HD/Ratio.html#method-i-factors","()","<p>For each of the num and den, provides a list of exponents. Primes are only\nup through the size of PRIMES …\n"],["from_a","HD::Ratio","HD/Ratio.html#method-c-from_a","(a)",""],["from_factors","HD::Ratio","HD/Ratio.html#method-c-from_factors","(factors)","<p>Generates a ratio from its constituent factors (expressed as a vector of\nprime exponents)\n"],["from_s","HD::Ratio","HD/Ratio.html#method-c-from_s","(s)","<p>Converts a string (separated by a tab, whitespace, or comma) to an array of\nHD::Ratio objects.  Example: …\n"],["hash","HD::Ratio","HD/Ratio.html#method-i-hash","()","<p>Defines the hash to properly test for equality\n"],["hd_sum","HD::Chord","HD/Chord.html#method-i-hd_sum","(config = HD::HDConfig.new)","<p>sum of the combinatorial distance of all members of the chord. the distance\nbetween each possible pair …\n"],["logical_origin","HD::Chord","HD/Chord.html#method-i-logical_origin","(config = HDConfig.new)","<p>See “Crystal Growth in Harmonic Space,” by James Tenney as well as the\ntables and refinements …\n"],["map","HD::Ratio","HD/Ratio.html#method-i-map","()","<p>The normal map method returns an Array (we want a Ratio back)\n"],["narray_to_string","HD","HD.html#method-c-narray_to_string","(n)",""],["new","HD::HDConfig","HD/HDConfig.html#method-c-new","(options = { })","<p>Creates a new HDConfig object with the following default options:\n<p>pc_only: false\n<p>prime_weights: [2,3,5,7,11,13,17,19,23] …\n"],["new","HD::Ratio","HD/Ratio.html#method-c-new","(*args)","<p>Default value is 1/1. This make it easier to provide an origin of 1/1 for\nany distance function.\n"],["new","HD::WeightedArray","HD/WeightedArray.html#method-c-new","(*x)",""],["pairs","HD::Chord","HD/Chord.html#method-i-pairs","()","<p>Iterate through and create a set of pairs, not counting pairs of the same\nchord\n"],["pc_space","HD::Ratio","HD/Ratio.html#method-i-pc_space","()",""],["prime_weights=","HD::HDConfig","HD/HDConfig.html#method-i-prime_weights-3D","(new_weights)",""],["reduce","HD::Ratio","HD/Ratio.html#method-i-reduce","()","<p>Reduces the ratio and returns the value\n"],["reject_untuneable_intervals","HD::HDConfig","HD/HDConfig.html#method-i-reject_untuneable_intervals","()",""],["reject_untuneable_intervals!","HD::HDConfig","HD/HDConfig.html#method-i-reject_untuneable_intervals-21","()",""],["select","HD","HD.html#method-c-select","(r = Ratio.new, config = HDConfig.new)","<p>Select: Provide this thing with a base ratio and a config file (with prime\nweights  &amp; tuneable intervals) …\n"],["to_f","HD::Ratio","HD/Ratio.html#method-i-to_f","()",""],["to_s","HD::Chord","HD/Chord.html#method-i-to_s","()",""],["to_s","HD::Ratio","HD/Ratio.html#method-i-to_s","()",""],["weights","HD::WeightedArray","HD/WeightedArray.html#method-i-weights","()",""],["weights=","HD::WeightedArray","HD/WeightedArray.html#method-i-weights-3D","(input_weights)","<p>Sets the new weighting\n"]]}}